*myaccurev*  My tips for Accurev.

Every day tasks                                             |myaccurev_tasks|
Documents                                     |myaccurev_doc| |myaccurev_links|
Installation for Automatos                              |myaccurev_automatos|
Installation on SuSe for Gnosis                      |myaccurev_installation|

===========================================================================
EVERY DAY TASKS                                             *myaccurev_tasks*

Issue number 522986 DZ new tests.

accurev help
accurev ws help

accurev login -n user
accurev logout

accurev show wspaces
accurev stat -n
accurev stat -x | grep -v git | grep -v logs
accurev stat * | grep -v backed
accurev stat DZ_TC_2_1_2_1.pm

accurev update
accurev add -x DZ_TC_2_1_2_2.pm DZ_TC_2_1_2_7.pm -c "Initial checkin for tests DZ_TC_2_1_2_2-7"
accurev add -x directoryNmame -c "Comment"
accurev purge path/to/file
accurev keep DZ_TC_2_1_2_1.pm -c "Add Ktrace parsing to DZ_TC_2_1_2_1"
accurev diff DZ_Utilities.pm
accurev diff -1 DZ_Utilities.pm
accurev promote DZ_Utilities.pm -c "Add recover from all faults to PostTest."
accurev promote path/to/file -k

accurev show wspaces
accurev chws -w MCC1 -l /c4_working/ws_testdev/
accurev chws -w mApollo_ptashl -l /c4_working/ws_automatos
accurev pop -R .

cd tmp
mkdir tests
accurev pop -R -v ctt-testdev-cs -L tests Automatos/Tests/Dev/Platform_EFT/Engineering_Functional_Test/DZ/.
cd tests/
ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/' 
 
===========================================================================
DOCUMENTS AND LINKS                          *myaccurev_doc* *myaccurev_links*

https://teamforge6.usd.lab.emc.com/sf/projects/usd_development_environment/

===========================================================================
INSTALLATION FOR AUTOMATOS                               *myaccurev_automatos*

Step-by-step instruction based on instructions for Gnosis by Oleg Subbotin.
Do all from c4dev account.

1. Check if you already have Accurev and CmTools.
accurev login -n <your_user_name>
If you do not have Accurev account then get it first. See wiki:
https://teamforge6.usd.lab.emc.com/sf/wiki/do/viewPage/projects.usd_development_environment/wiki/HowToRequestAnAccurevAccount

If your login is successful go to 5.
If Accurev is found but you got the error:
    The AccuRev client you are using is too old.
    You must install a newer version before proceeding.
    AccuRev Error: 9
Then remove old Accurev, else skip next step.

2. Remove old Accurev and CmTools, most likely they are in /opt/.
Move /etc/profile.d/accurev.csh and /etc/profile.d/accurev.sh to backup.

3. Install Accurev and CmTools. Instructions here:
https://teamforge6.usd.lab.emc.com/sf/go/wiki9520
NOTE: recommended default path is /opt/accurev. List of the accurev servers
are in the howto.

4. Login to accurev
accurev login -n <your_user_name>
NOTE: -n – creates the persistent login session with accurev and you do not
need to login every morning. Corp credentials.

5. Create places where your workspace will be deployed on the VM.
sudo sh -c 'd=/c4_working/ws_automatos; mkdir -p $d; chown c4dev $d; chgrp users $d;'
sudo sh -c 'd=/c4_working/ws_testdev; mkdir -p $d; chown c4dev $d; chgrp users $d;'
NOTE: this is only placeholders for files, call it as you want

6. If you use several machines (for example Windows, VM local and VM in US) 
   then I suggest to create separate workspaces for Automatos stream on each 
   machines but have only one workspace for your testdev stream and move it 
   when you switch a machine. In this way you will have access to your kept 
   but not promoted files.

7. Create Automatos workspace
cd /c4_working/
accurev mkws -b ctt-mApollo-cs -w mApollo -l /c4_working/ws_automatos/ -i
NOTE: -b - the name of parent stream.
      -w - name of you workspace on server (your login will be added at the end).
      -l - location.
      -i - initialize new workspace
The workspace on the server will be visible as "mApollo_<your_login_name>"

8. Initialize your new workspace.
cd /c4_working/ws_automatos/
accurev update

9. Remove all the modules you will never need, or skip this step if you like 
   to get Conductor and so on.
modSetup -op remove all

10. Set only modules that you will work on.
modSetup -op set <module_name>
Or get then all.
modSetup -op set all
NOTE: to get the list of modules, run "modSetup -op list all".

11. Populate workspace.
modSetup -op pop
NOTE: this will pull the files from the server for selected modules and place
them into you local workspace.

12. Update again.
accurev update
NOTE: I am not sure, but this will pull the dependencies for you modules. Does
not hurt anyway.

13. Create or move your testdev workspace.
If you do not have testdev workspace on other machines then create a new one 
same way as Automatos workspace above. Stream = ctt-tesdev-cs location 
= ws_testdev

If you want to move your existing workspace:
accurev chws -w <your-existing_ws> -l /c4_working/ws_testdev/
Use workspace name without your login suffix.
cd ws_testdev/
accurev pop -R .
accurev update
The update should show that all is up to date.

14. Link testdev tree with Automatos/Framwork
ln -nfs /c4_working/ws_automatos/Automatos/Framework/ /c4_working/ws_testdev/Automatos/Framework

15. Make Automatos scripts executable
chmod 755 /c4_working/ws_testdev/Automatos/Framework/Dev/bin/*

16. Setup perl paths:
export MyWorkSpace=/c4_working/ws_testdev
export MATOS=$MyWorkSpace/Automatos/Framework/Dev
export DevTests=$MyWorkSpace/Automatos/Tests/Dev/
export PATH=$MATOS/bin:$PATH
export PERL5LIB=$MATOS/lib:$DevTests:$PERL5LIB

17. Read Automatos wiki for further steps of Automatos setup. Depending on 
    your VM you might need to update Perl, install latest SSH and so on.

===========================================================================
INSTALLATION ON SUSE FOR GNOSIS                      *myaccurev_installation*

Step-by-step instruction which probably will give you ability to compile the
code. All the steps below were done on VM with SUSE SP1 version. The parent
stream used in the examples are “upc-KHprep-cs”

1. Update VM.
# which update_vm
/re/bin/update_vm
# sudo update_vm
This will install necessary versions of gcc and libraries.

2. Update mount configuration needed for finding pre-generated rpms:
# sudo /c4shares/auto/devutils/bin/morpheus/c4dev_update.sh
NOTE: This step is needed if you get complains about missing Artifacts
directory on later stages.

3. Install Accurev and CmTools. Instructions here:
https://teamforge6.usd.lab.emc.com/sf/go/wiki9520
NOTE: recommended default path is /opt/accurev. List of the accurev servers
are in the howto.

4. Login to accurev
# accurev login -n <your_user_name>
NOTE: -n – creates the persistent login session with accurev and you do not
need to login every morning. Corp credentials.

5. Create a place where your workspace will be deployed on the VM.
# mkdir /c4_working/Coding/my_first_workspace
NOTE: this is only a placeholder for files, call it as you want

6. Create a workspace
# accurev mkws -b upc-KHprep-cs -w bugfix  -l  /c4_working/Coding/my_first_workspace -i
NOTE: -b - the name of parent scream.
-w - name of you workspace on server [you login will be added at the end].
-l - location.
-i - initialize new workspace
The workspace on the server will be visible as “bugfix_<your_login_name>”

7. Initialize your new workspace.
#accurev update
NOTE: you need to cd to the workspace.

8. Remove all the modules you will never need.
# modSetup -op remove all
NOTE: this initially removes all the modules from the list - by default
everything in included - DP, CP, platform, kernel, images, drivers EVERYTHING.
You don’t want it all.

9. Set only modules that you will work on.
# modSetup -op set <module_name>
NOTE: to get the list of modules, run “modSetup -op list all”. Example of
modules: safe, cp, ECOM…

10. Populate workspace.
# modSetup -op pop
NOTE: this will pull the files from the server for selected modules and place
them into you local workspace.

11. Update again.
# accurev update
NOTE: I am not sure, but this will pull the dependencies for you modules. Does
not hurt anyway.

12. Build.
# build_all -t GNOSIS <module_name>
NOTE: you can give list all modules to build, comma separated, if you build
multiple. I build only “safe” module and it worked for me.

13. Find binaries and RPMs.
RPMs are placed in the output/<module_name>/GNOSIS_DEBUG/
If you transfer selected libraries only,  search you module tree. For safe
they can be found under safe/Targets/armada64_checked/<variation>/exec, where
variation is kernel/user/simulation and so on.

By Oleg Subbotin



  vim:tw=78:ts=8:ft=help:norl:modifiable:
  vim:fdm=expr:fen:fdl=0:foldexpr=getline(v\:lnum)=~'^===='?'<1'\:'1':
