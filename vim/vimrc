" Vim configuration by Lubomir-Russia
" Settings are gathered from different books, sites, and people
"
" To me vi is zen. To use vi is to practice zen. Every command is a koan.
" Profound to the user, unintelligible to the uninitiated. You discover truth
" every time you use it. 
"                               — Satish Reddy 
"                               From O'Railly - Learning VIM
"
" 
" A “Language” of Text Editing
"
" One way to think about Vim’s normal-mode commands is like a language. You
" have “verbs” and “nouns”. For example: the “change” command (c) would be a
" verb and the “word” item (w) is a noun. You can combine them to form
" imperative sentences that talk about what you want to do with your text.
"
" The wonderful part about this is that whenever you learn a new verb (like
" “delete” (d)) you can immediately apply it to all the nouns you know, and
" vice versa.
"
" Vim also has “adjectives” like “inside” and “around” (i and a) that let you
" craft sentences like “change inside parenthesis” (ci( or cib). Once you
" learn one of these you can immediately apply it to all the verbs and nouns
" you already know.
"                               - Steve Losh
"                               From Coming Home to Vim 
"                               http://stevelosh.com/blog/2010/09/coming-home-to-vim/
"
" Installation :
" Copy or symlink to ~/.vimrc or ~/_vimrc. and make dir for swap files
" ln -nfs ~/bin/dotfiles/vim/vimrc ~/.vimrc
" ln -nfs ~/bin/dotfiles/vim ~/.vim
" mkdir -p ~/.bak/swap
" mkdir -p ~/.bak/vim
" In Windows set variable HOME=%USERPROFILE%
" Copy ctag.exe to C:\ctags\ctags.exe and add this dir to PATH
"
" System wide settings are here: /usr/local/share/vim/vim73 

set nocompatible                  " Must come first because it changes other options.

if ( has("win32") )
    " source $VIMRUNTIME/mswin.vim    " Makes gVIM behave more like a Windows
    " behave mswin                    " Makes gVIM behave more like a Windows
    set langmenu=none                 " Set gvim menue in English (must be in the beginning of _vmrc)
    let g:showfuncctagsbin="C:\\ctags\\ctags.exe"  " Only in Windows
    set encoding=utf-8
    let $LANG='en'                    " Set messages in English
    set guioptions-=T                 " Hide toolbar.
    set background=light              " Background.
    set lines=39 columns=110          " Window dimensions.
    " set guioptions-=r                 " Don't show right scrollbar
endif

silent! call pathogen#runtime_append_all_bundles()

" Professor VIM says '87% of users prefer jj over esc', jj abrams disagrees
imap jj <Esc> 

" Mappings useful for FLARE log view
nmap <F3> /<<< ------<CR>zz 
nmap <F4> /START<CR>zt

" Mapping F7 for spell check (use ]s, z=, zg, zb)
nmap <F7> :set spell!<Cr>

" Mappings useful for Perl
nmap <F5> :set number!<Cr> 
nmap <F6> :set list!<Cr>
nmap <F8> :set wrap!<Cr>
" Could not make ShowFunc work in win gVIM
nmap <F11> <Plug>ShowFunc 
" Save, run script and show output in the scrap window
map <F9> :w<CR>:Shell %<CR><CR>

" Mapping \1 to copy a line and comment it with #
nmap <leader>1 yypI#<Esc>k

" Use perl compiler for all *.pl and *.pm files.
autocmd BufNewFile,BufRead *.p? compiler perl
" Set working dir to the dir of the current file, it works better with plugins then set autochdir
autocmd BufEnter * silent! lcd %:p:h

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
" useless, use default gt
" map <leader>tn :tabnext<cr>      
" useless, use default gT
" map <leader>tp :tabprevious<cr>  
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Vim - hjkl-ing while in insert mode
inoremap <M-j> <C-O>gj
inoremap <M-k> <C-O>gk
noremap! <M-h> <Left>
noremap! <M-l> <Right>

" Create an undo point after each WORD
" inoremap looks more logical but it brakes the abbreviation, so imap is used
imap <Space> <Space><c-g>u
imap <Tab> <Tab><c-g>u
imap <CR> <CR><c-g>u
" Recover from accidental Ctrl-U and Ctrl-W in insert mode         
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" Enter in normal mode adds a new line
" This mapping is incompatible with ShowFunc plugin, that uses <CR> for jumps
"nnoremap <CR> i<CR><Esc>

" Uncomment to use Jamis Buck's file opening plugin
"map <Leader>t :FuzzyFinderTextMate<Enter>

" Controversial...swap colon and semicolon for easier commands
"nnoremap ; :
"nnoremap : ;
"vnoremap ; :
"vnoremap : ;

" Reread .vimrc configuration file after it was saved.
" autocmd! bufwritepost $MYVIMRC source $MYVIMRC
" Same but in case the ~/.vimrc is just a link to a vimrc file in dorfiles.
autocmd! bufwritepost vimrc source $MYVIMRC
autocmd! bufwritepost _vimrc source $MYVIMRC

" if has("autocmd")
"         set viewoptions=cursor,folds
"         autocmd BufWinLeave *.* silent mkview       " Save view of the window.
"         autocmd BufWinEnter *.* silent loadview     " Restore it when open.
" endif

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.
" set showmatch                     " Similar built-in function.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in. Default when not vi compatible.
set title                         " Set the terminal's title
" set visualbell                    " No beeping but terminal flash.
set vb t_vb=' 
" No beeping and no flash.

set ruler                         " Show cursor position.
set showtabline=2		          " Display tabs all of the time
" set number                        " Show (absolute) line numbers.
set relativenumber                " Show relative line number. Useful for motion/deletion commands.
set confirm                       " Use confirmation dialog instead of error message.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.
" set autoread                      " Reread file automatically if it changes.

set wildmenu                      " Enhanced command line completion.
" set wildmode=list:longest         " Complete files like a shell.
set wildmode=list,full            "	List all matches without completing, then each full match.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set linebreak                     " Wrap at the end of words.
" set showbreak=------>           " String to put at the start of lines that have been wrapped.
set scrolloff=3                   " Show 3 lines of context around the cursor.
" set colorcolumn=85                " Show a colored column at 85 characters (so I can see when I write a too-long line of code).
" set formatoptions=qrn1            " Different styles of text formating see fo-table for details or just use defaults. 

" set browsedir=current             " Dir for file browser. Only for Win GUI and some Unix managers.
" set nobackup                      " Don't make a backup before overwriting a file.
" set nowritebackup                 " And again.
" In Windows set local var HOME=%USERPROFILE%
set backup                        " Keep a backup file
set backupdir=$HOME/.bak/vim/     " Keep backup files in one location (it must exist).  
set directory=$HOME/.bak/swap//,. " Keep swap files in one location, if not possible then in working dir.
" If a directory ends in two path separators, the swap file name will be built from the complete path to the file with all path separators. This will ensure file name uniqueness in the preserve directory.
" Add the following line to your shell initialization file ~/.bashrc or  ~/.profile :
" find $HOME/.bak/vim/ -name "*" -type f -mtime +60 -exec rm -f {} \;
" When you are logging in all files in the backup directory older then 60 days will be removed. Be shure to backup in shorter terms!

set undofile                      " Create <Filename>.un~ file. These files contain undo information so you can undo previous actions even after you close and reopen a file.
set undodir=$HOME/.bak/undofiles/
" au FocusLost * :wa                " Save all on losing focus.

set tabstop=4                     " Global tab width.
set shiftwidth=4                  " And again, related.
set expandtab                     " Use spaces instead of tabs
set softtabstop=4                 " It feels like <Tab>s are being inserted, while in fact a mix of spaces and <Tab>s is used.
set autoindent                    "  Copy indent from current line when starting a new line.
" Keep tabs instead of spaces in the files: crontab, fstab and make.
au FileType crontab,fstab,make set noexpandtab tabstop=8 shiftwidth=8
" Set list listchars=tab: ,precedes:<,extends:>
set list listchars=precedes:<,extends:>,tab:>-,trail:-
set nolist                        " Do not show list till asked to do it

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" set t_Co=256                      " Use more colors in terminal. May effect some colorshemas.
" colorscheme topfunky-light
" colorscheme vividchalk
" colorscheme zenburn             " Works best with t_Co=256
colorscheme murphy              " Works best with t_Co=256 not set
" Solarized colorschema http://ethanschoonover.com/solarized
" let g:solarized_termcolors=256
" colorscheme solarized             " Works best with t_Co=256
" set background=dark


" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" To get basic Folding for Perl and PHP working
let perl_fold=1
let perl_fold_blocks = 1
let php_folding=1
set nofoldenable     " Do not fold when a file is just opened
" set foldlevel=1    " Only first level is opened if foldenable is set.
" set foldcolumn=3   " Show control line.
" set foldopen=all   " Open folds when entering them. Otherwise use <l> to move in.

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
" autocmd BufNewFile,BufRead *_spec.rb compiler rspec

" Vim è ðóññêàÿ ðàñêëàäêà êëàâèàòóðû
"
" Â îáû÷íîì ðåæèìå Vim ïî óìîë÷àíèþ îæèäàåò, ÷òî êîíñîëü íàõîäèòñÿ â ðåæèìå
" ââîäà ëàòèíñêèõ ñèìâîëîâ. Åñëè âû, ê ïðèìåðó, ðåäàêòèðóåòå ñ ïîìîùüþ Vim
" òåêñò íà ðóññêîì ÿçûêå, èëè â ñìåøàííûõ êîäèðîâêàõ (ê ïðèìåðó, HTML-ñòðàíèöó
" íà ðóññêîì), òî ïîñòîÿííàÿ íåîáõîäèìîñòü ïåðåêëþ÷àòü ñèñòåìíóþ êëàâèàòóðíóþ
" ðàñêëàäêó î÷åíü áûñòðî âàì íàäîåñò. Ñóùåñòâóåò íåñêîëüêî ñïîñîáîâ ðåøèòü ýòó
" ïðîáëåìó.
" Ñïîñîá 1 : Ñäåëàòü òàê, ÷òîáû ðóññêèå áóêâû ìîæíî áûëî ââîäèòü êîãäà ñèñòåìíàÿ
" ðàñêëàäêà íàõîäèòñÿ â ðåæèìå ââîäà ëàòèíñêèõ ñèìâîëîâ.
"
set keymap=russian-jcukenwin         " óñòàíîâèòü keymap, ÷òîáû ïî Ctrl+^ ïåðåêëþ÷àëñÿ íà ðóññêèé è îáðàòíî
set iminsert=0                       " ïî óìîë÷àíèþ - ëàòèíñêàÿ ðàñêëàäêà
set imsearch=0                       " ïî óìîë÷àíèþ - ëàòèíñêàÿ ðàñêëàäêà ïðè ïîèñêå
set guifont=courier_new:h17:cRUSSIAN " óñòàíîâèòü øðèôò Courier New Cyr
set iskeyword=@,48-57,_,192-255      " íàñòðàèâàþ äëÿ ðàáîòû ñ ðóññêèìè ñëîâàìè (÷òîáû w, b, * ïîíèìàëè ðóññêèå ñëîâà)
"
" Ïîñëå ýòîãî ñèñòåìíóþ ðàñêëàäêó êëàâèàòóðû ìîæíî áóäåò îñòàâèòü â ðåæèìå
" ââîäà ëàòèíñêèõ ñèìâîëîâ, à ïåðåêëþ÷åíèå ìåæäó ÿçûêàìè îñóùåñòâëÿòü óæå
" âíóòðè ñàìîãî ðåäàêòîðà ñ ïîìîùüþ êîìàíäû Ctrl+^ (Ctrl+6 â âåðñèè äëÿ
" Windows) 
"
" Ñïîñîá 2 : Ñäåëàòü òàê, ÷òîáû Vim ïîíèìàë, êàêèå êëàâèøè íàæèìàþòñÿ, åñëè âêëþ÷åíà ðóññêàÿ ðàñêëàäêà.
" set langmap=¸éöóêåíãøùçõúôûâàïðîëäæýÿ÷ñìèòüáþ¨ÉÖÓÊÅHÃØÙÇÕÚÔÛÂÀÏÐÎËÄÆÝß×ÑÌÈÒÜÁÞ;`qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.~QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>
" ïðè ýòîì ñïîñîáå íàäî ïîìíèòü è èñïîëüçîâàòü ðóññêèå çíàêè ïðèïåíàíèÿ.
" Ïîïûòêà ïåðåíàçíà÷èòü èõ ïðèâåä¸ò ê ïåðåíàçíà÷åíèþ è â àíãëèéñêîé ðàññêëàäêå
" òàê æå. Íàïðèìåð ïåðåíàçíà÷èâ 'ðóññêóþ' . íà / ïîëó÷èì ÷òî òåïåðü âñåãäà è
" 'àíãëèéñêàÿ' . òàê æå áóäåò óêàçûâàòü íà /
"
" Åñëè ó âàñ ëîêàëü UTF, òî äàííûé ñïîñîá ìîæåò íå ðàáîòàòü â ñòàðûõ âåðñèÿõ Vim.
" Íåîáõîäèìî êàæäûé ñèìâîë íàçíà÷èòü èíäèâèäóàëüíî: http://ru.wikibooks.org/wiki/Vim

" Jump to the last position of opened file.
autocmd! bufreadpost * call LastPosition()
    function! LastPosition()
        if line("'\"") && line("'\"")<=line('$')
            normal! `"
        endif
    endfunction
set vb t_vb="

" command :Shell will execute a shell command and put uptput to scrap window
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

" This version of :Shell will execute a shell command and put uptput to window
" with the command name (not practical for perl scripts)
" function! s:ExecuteInShell(command)
"   let command = join(map(split(a:command), 'expand(v:val)'))
"   let winnr = bufwinnr('^' . command . '$')
"   silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
"   setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
"   echo 'Execute ' . command . '...'
"   silent! execute 'silent %!'. command
"   silent! execute 'resize ' . line('$')
"   silent! redraw
"   silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
"   silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
"   echo 'Shell command ' . command . ' executed.'
" endfunction
" command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

let wiki = {}
"let wiki.path = '~/bin/dotfiles/wiki/'          " vimwiki location
let g:vimwiki_list = [{'path': '~/bin/dotfiles/wiki/'}] " works both in Unix and Windows
let wiki.auto_export = 1                   " keep html uptodate
let wiki.nested_syntaxes = {'perl': 'perl', 'bash': 'sh', 'python': 'python', 'c++': 'cpp'} " highlight code syntax

