VIM How to

1 Installation

mkdir ~/src
cd ~/scr
wget ftp://ftp.vim.org/pub/vim/unix/vim-7.3.tar.bz2
tar -xaf vim-7.3.tar.bz2
cd vim73
./configure --with-features=huge --enable-perlinterp
# --prefix={directory}  Top directory where to install Vim. default is /usr/local
make
make install
vim --version
#add plugings
The NERD tree : A tree explorer plugin for navigating the filesystem
project.tar.gz : Organize/Navigate projects of files (like IDE/buffer explorer) 
LustyExplorer : Dynamic filesystem and buffer explorer # This plugin requires Vim be compiled with Ruby interpretation.
FuzzyFinder : buffer/file/command/tag/etc explorer with fuzzy matching 
bufexplorer.zip : Buffer Explorer / Browser 
taglist.vim : Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc) 
ack.vim : Plugin for the Perl module / CLI script 'ack' 

2 Saving

:w
:w! #only if permissions allow
:w !sudo tee % # write as a root

3 Syntax
:syntax enable
:set syntax=perl #force perl syntax on any file type

4 Searching
:set hlsearch
:set incsearch
:set number
# 12G same as 12gg  

5 Open files
:e filename
:e . #browse dir
:ls #buffers
<Ctr>^ #alternative buffer (previous or useful file from plugin)
:b name #switch to buffer (try TAB and arrows as well)
:b3 #switch to buffer number 3
:bp #previous buffer
:bn #next buffer
:bd #delete (close) buffer
:bf #goes to the first buffer, and 
:bl #the last
:ba #open a window for every buffer (buffer all)
:set wildmode=list,full #see :h wildmode for details
:set hidden #lets hide buffer without saving
:e scp://my_user@remote_hostname//path/to/remote/file # open remote file

6 Spelling
:set spell
z= #Suggestions
[s #Next wrong word
]s #Previous wrong word
zg #Add as good 
zw #Add as wrong
zug #Undo adding as good
zuw #Undo adding as wrong

# Tab mappings.
map <leader>tt :tabnew<cr>		:tabnew                " open a new tab
map <leader>te :tabedit			:tabe[dit] {file}      " edit {file} in a new tab
map <leader>tc :tabclose<cr>		:tabc[lose]            " close the current tab
map <leader>to :tabonly<cr>		:tabo[nly]             " close the other tabs
map <leader>tn :tabnext<cr>		:tabn[ext]             " go to the next tab
map <leader>tp :tabprevious<cr>		:tabp[revious]         " go to the previous tab
map <leader>tf :tabfirst<cr>		:tabfir[st]            " go to the first tab
map <leader>tl :tablast<cr>		:tabl[ast]             " go to the last tab
map <leader>tm :tabmove			:tabm[ove] 3           " move the current tab to after tab 3, or the end if no number is given
					:tabs                  " list the tabs and their windows
8 Colorschem
emacs.vim
far.vim
murphy.vim
topfunky-light.vim
vividchalk.vim
wombat.vim

9 Movements
0 g0 ^ g^ gE B ge b h gm l w W  e E g$ $
Fx Tx tx Tx  ;,

gg xH { ( gk - k M j + gj ) } xL G # 12gg = 12xG 

Ctrl-b Ctrl-u Ctrl-y Ctrl-e Ctrl-d Ctrl-f

zt (z Enter) zz zb # set scrolloff=3 to have some extra lines for a lookup
zH zh zl zL
gCtrl-g # where am I? also set ruler set number set laststatus=2

ma `a 'a #local marks used for navigation and block editing
mA `A 'A #global marks can be used as short cuts to often used files
`0-`9 #most recent exited files
'' `` #latest jump
'. `. #latest edit
gi    #latest edit and insert
`[ '[ #To the first character of the previously changed or yanked text. 
`] '] #To the last  character of the previously changed or yanked text. 
]'    #[count] times to next line with a lowercase mark below
]`    #[count] times to lowercase mark after the cursor. 
['    #[count] times to previous line with a lowercase mark
[`    #[count] times to lowercase mark before the cursor.
:marks

10 Edits
I i a A
r R #backspace will restore the original
cc = C #change to the end of line
xJ xgJ #join x lines with/without spaces
x<< x>>   #indent
Cntr-t -d #indent in normal set tabstop=2 set shiftwidth=2 set expandtab

#vit = {change, delete, yank, visual} + {all, inner} + {word, Word, sentence, paragrath, tag, ", ', [, {, (} 
% #jump to match, also see plugins
o #jump in visual mode

11 Searching
g# # N ? / n * g*
/pattern/+   #next line
/pattern/+x  #x lines after
/pattern/e+x #x characters after
#vit = {change, delete, yank, visual} + {?pat,/pat} + {?+,?+x,?-,?-x,/+,... } 
:[range] s/pattern/string/[flags] [count]
#flags g, c, i, I
#ranges , joins ; separates, also use visual
empty - current line
%     - all buffer
+x -x - x lines up/down
1     - first line
$     - last line
't    - mark 't
/pat/ - pattern
#count - only in the next x lines
/\cpatter - case insensitive
/\Cpatter - case sensitive

:[range] g/pattern/[cmd] #search and execute
# #show lines with numbers
d #delete lines
y #yank lined
normal {command} #Execute an extended sequence 
#examples :g/^$/d delete empty lines   :g/pat/+ y copy lines after match :.,+10g/pat/d :.,'f+2g/pat/# :.,/pat1/g/pat2/d
#examples :g/^sub /normal O# This sub is for  - adds this line before all sub definitions
#examples :g/pat list all lines that have pat
#Regular expression syntax style 
\v #very magic =~ Perl = Unix Egrep, but '=' is 0 or 1 match (in Perl it is '?')  /\v(.y){3}
\m #magic = default = Unix grep => \( \) \+ \= *   /\(.y\)\{3}
#last search is in register / to copy it into command <Ctrl-r>/ ex. tune the search with inc. search first then copy it to g/<Ctrl-r/d delete  
set incsearch

:%perldo s/this/that/ # execs that perl s///

12 Mapping and abbreviation
map namp imap vmap map!
:map :vmap :map > #show current mappings
:vumap > #unmap > for visual mode
:vmap > >gv #indent block without losing selection
:vmap < <gv
:vmap <Tab> >gv
:vmap <S-Tab> <gv
:imap <Tab> <C-N>
:imap <S-Tab> <C-P>
:nnoremap ; : #swapping keys
:nnoremap : ;
:let mapleader="," #change the personal hotkey
:map! <Leader>f <Esc>gUiw`]a #capitalize current word in insert mode
:ab ff FireFox #insert, command and replace mode
# To avoid the abbreviation in insert mode: Type part of the abbreviation, exit
# insert mode with <Esc>, re-enter insert mode with "a" and type the rest.  Or
# type CTRL-V before the character after the abbreviation.
# To avoid the abbreviation in Command-line mode: Type CTRL-V twice somewhere in
# the abbreviation to avoid it to be replaced.  A CTRL-V in front of a normal
# character is mostly ignored otherwise.

13 Foldings
:set foldmethod=
indent # indent
syntax # syntax highlighting rules
marker # markers in the text
diff   # unchanged text (used in diff views)
expr   # custom, code-driven folding
zM za (zc zo) zR     zk zj
manual # select ranges to fold (default)

14 Windows
^WT    	# move window to the new tab
^Wc	# close window
^Wo	# only this window
