# Local bashrc by Lubomir
#
# Link this file to your home directory:
# ln -nfs ~/bin/dotfiles/bashrc/bashrc ~/.bashrc
#
# The shell reads one or more startup files. Some of the files are read only when a shell is a
# login shell. Bash reads these files:
# 1. /etc/profile. Executed automatically at login.
# 2. The first file found from this list: ~/.bash_profile, ~/.bash_login, or ~/.profile.
# executed automatically at login.
# 3. /etc/bash.bashrc (which calls inside itself /etc/bash.bashrc.local) and
# the last ~/.bashrc are read by EVERY NONLOGIN shell, so do not put here
# anything that should not go to the not interactive shell. However, if invoked
# as sh, Bash instead reads $ENV, for POSIX compatibility.
#
# So if any aliases are defined in profile or in bash_profile they will not be
# available in screen session, since screen start a new nonlogin shell.
#
# The getpwnam() and getpwuid() functions are the sources of home directories for ~name
# abbreviations. (On single-user systems, the user database is stored in /etc/passwd.
# However, on networked systems, this information may come from NIS, NIS+, or LDAP, not
# your workstation password file.)
#

export MyWorkSpace=/c4_working/ws_testdev
export MATOS=$MyWorkSpace/Automatos/Framework/Dev
export DevTests=$MyWorkSpace/Automatos/Tests/Dev/
export MyTests=$DevTests/Platform_EFT/Acceptance_Test
export MATOS_2=/c4_working/Automatos
export MyTests_2=/c4_working/MyTests

# Append commands to the history file, rather than overwrite it
shopt -s histappend
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# Force the current shell to reread the history file to synchronize with other
# export PROMPT_COMMAND="history -n; $PROMPT_COMMAND"

# Allow a larger history file

export HISTFILESIZE=1000000
export HISTSIZE=1000000

# Don’t store lines: that start with a space and duplicate.
# export HISTCONTROL=ignorespace
# export HISTCONTROL=ignoredups
export HISTCONTROL=ignoreboth

# Remove the use of certain commands
export HISTIGNORE='bg:fg:history'

# Record timestamp
export HISTTIMEFORMAT='%F %T '

# Use one command per line to make your .bash_history file easier to pars.
shopt -s cmdhist


# Let my version of soft have priority
export PATH=$MATOS/bin:$PATH
export PATH=~/bin/:$PATH

export PERL5LIB=$MATOS/lib:$DevTests:$MyTests
# Matos does not like /auto/tools/LATEST/lib/perl
# export PERL5LIB=$PERL5LIB:/home/c4/perl:/c4shares/auto/tools/LATEST/lib/perl

# Let all editing be in Vim (including command line editing be C-x C-e)
export EDITOR=vim

# Let LESS to show color (useful for git logs) and other opions
export LESS=-RiMX

export GREP_OPTIONS='--color=auto' # by default match is read on black
#export GREP_COLOR='5;38' # blinking
export GREP_COLOR='1;33' # Yellow on black

# Red PS1 if root, light green if not

if test "$UID" -eq 0  ; then
    # _color="\e[31m"
    # _reset="\e[0m"
    _color=$(tput setaf 1; tput bold)
    _reset=$(tput sgr0)
else
    _color=$(tput setaf 2; tput bold)
    _reset=$(tput sgr0)
fi

# Add git info
# The argument to __git_ps1 will be displayed only if you are currently in a
# git repository.  The %s token will be the name of the current branch.

# export PS1='\[$_color\]\D{%F %T} \W $(__git_ps1 "(%s)")\$ \[$_reset\]'
# The \[ and \] symbols allow bash to understand which parts of the prompt
# cause no cursor movement; without them, lines will wrap incorrectly.

# As above but in three lines

export PS1='\[$_color\]\n\D{%F %T} \w $(__git_ps1 "(%s)")\n\u@\H\$ \[$_reset\]'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

find $HOME/.bak/vim/ -name "*" -type f -mtime +90 -exec rm -f {} \;
# When you are logging in all files in the backup directory older then 90 days
# will be removed. Be shure to backup in shorter terms!

source $HOME/bin/dotfiles/bashrc/aliases

# __END__

# Different kinds of PS1

# A nice three line PS1
# export PS1='\n\D{%F %T} \w\n\u@\H\$ '

# Prompt with indicator :) or :( depending on result of prev. command
# export PS1='\u@\h `smiley` \w\n\$ '
#    smiley ()
#    {
#        if [ $? = 0 ]; then
#            echo -e ':)';
#            true;
#        else
#            echo -e '\e[31m:(\e[0m';
#            return $?;
#        fi
#    }

# Another colorful PS1
# red=$(tput setaf 1)
# green=$(tput setaf 2)
# blue=$(tput setaf 4)
# reset=$(tput sgr0)
# PS1=’\[$red\]\u\[$reset\]@\[$green\]\h\[$reset\]:\[$blue\]\w\[$reset\]\$ ‘
#

# # Back up of Flare settings
# # Flare specific Tools and enviroment
# export PATH=$PATH:/home/c4/testcases/Tools/
# export C4_PARAMETERS=./Neo_settings.txt

if [ -f $HOME/.bachrc_local ]; then
    source $HOME/.bachrc_local
fi
